<?xml version="1.0" encoding="UTF-8"?>
<!--suppress ALL -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
  	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
 	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">
	<!-- 加载配置文件 -->
	<context:property-placeholder location="classpath:/dbconfig/*.properties" />
	<!-- db1事务管理-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource"></property>
	</bean>

	<!-- DBCP数据库连接池
	<bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource"
		  destroy-method="close">
		<property name="driverClassName" value="${dbcp.driver}" />
		<property name="url" value="${dbcp.url}" />
		<property name="username" value="${dbcp.username}" />
		<property name="password" value="${dbcp.password}" />
		<property name="initialSize" value="${dbcp.initialSize}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="minIdle" value="${dbcp.minIdle}" />
		<property name="maxWait" value="${dbcp.maxWait}"></property>
		<property name="maxOpenPreparedStatements" value="${dbcp.maxOpenPreparedStatements}"></property>
		<property name="testOnBorrow" value="${dbcp.testOnBorrow}"></property>
		<property name="testWhileIdle" value="${dbcp.testWhileIdle}"></property>
		<property name="testOnReturn" value="${dbcp.testOnReturn}"></property>
		<property name="validationQuery" value="${dbcp.validationQuery}"></property>
		<property name="timeBetweenEvictionRunsMillis" value="${dbcp.timeBetweenEvictionRunsMillis}" />
		<property name="numTestsPerEvictionRun" value="${dbcp.numTestsPerEvictionRun}" />
		<property name="minEvictableIdleTimeMillis" value="${dbcp.minEvictableIdleTimeMillis}" />
	</bean>
	 -->

	<!-- 阿里druid数据库连接池(暂时关闭)
	<bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${druid.url}" />
		<property name="username" value="${druid.username}" />
		<property name="password" value="${druid.password}" />
		<property name="driverClassName" value="${druid.driverClassName}" />
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${druid.validationQuery}" />
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
		<property name="filters" value="${druid.filters}" />
	</bean>
	-->


	<!-- C3P0数据库连接池(暂时关闭)-->
	<bean id="dataSource3" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		  destroy-method="close">
		<property name="driverClass" value="${c3p0.driverClass}" />
		<property name="jdbcUrl" value="${c3p0.url}"  />
		<property name="user" value="${c3p0.username}" />
		<property name="password" value="${c3p0.password}" />
		<property name="minPoolSize" value="${c3p0.minPoolSize}" />
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
		<property name="maxStatements" value="${c3p0.maxStatements}" />
		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
		<property name="acquireRetryAttempts" value="${c3p0.acquireRetryAttempts}" />
		<property name="breakAfterAcquireFailure" value="${c3p0.breakAfterAcquireFailure}" />
		<property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}" />
	</bean>


	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis/sqlMapConfig.xml" />
		<property name="dataSource" ref="dynamicDataSource"></property>
		<property name="mapperLocations">
			<array>
				<value>classpath:/mapper/elastic/*.xml</value>
				<value>classpath:/mapper/user/*.xml</value>
				<value>classpath:/mapper/zzjg/*.xml</value>
				<value>classpath:/mapper/gather/*.xml</value>
				<value>classpath:/mapper/screen/*.xml</value>
				<value>classpath:/mapper/page/*.xml</value>
			</array>
		</property>
	</bean>

	<!-- 需要基础spring的 AbstractRoutingDataSource（路由）来实现动态设置数据库连接池  -->
	<bean id="dynamicDataSource" class="cbc.boot.myboot.controller.db.util.DynamicDataSource" depends-on="flywayMigration">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<!--<entry value-ref="dataSource1" key="db1"></entry>-->
				<!--<entry value-ref="dataSource2" key="db2"></entry>-->
				<entry value-ref="dataSource3" key="db3"></entry>
			</map>
		</property>
		<!--设置默认数据库-->
		<property name="defaultTargetDataSource" ref="dataSource3"></property>
		<!--
			设置默认数据库 设置后，当接收到的参数值为不存在的的时候（如db5，则采用默认的数据库） 如没有设置后，则报错：Cannot
			determine target DataSource for lookup key [db5] 可不设置。 <property
			name="defaultTargetDataSource" ref="dataSource1"> </property>
		-->
	</bean>


	<!-- Flyway服务 -->
	<bean id="flywayMigration" class="org.flywaydb.core.Flyway" init-method="migrate">
		<property name="baselineOnMigrate" value="true"/> <!--基线迁移 默认false-->
		<property name="locations" value="classpath:dbconfig/mysql"/><!--脚本默认地址src/resource/dbconfig-->
		<property name="outOfOrder" value="true"/> <!--Flyway不严格验证版本顺序-->
		<property name="placeholderReplacement" value="false"/> <!-- 开启Flyway对特殊占位符不进行替换-->
		<property name="dataSource" ref="dynamicDataSource"/>
	</bean>

</beans>






