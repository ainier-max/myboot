################################mysql######################################################
#基础属性
druid.driverClassName=com.mysql.jdbc.Driver
#druid.url=jdbc:mysql://10.254.10.38:3306/mybatics?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&failOverReadOnly=false&allowMultiQueries=true&useSSL=false
#druid.username=cbc
#druid.password=cbc

druid.url=jdbc:mysql://10.254.10.31:3306/sjzl_cbc_test?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&failOverReadOnly=false&allowMultiQueries=true&useSSL=false
druid.username=sjzl
druid.password=123


#druid.url=jdbc:mysql://106.53.28.207:3306/mybatics?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&failOverReadOnly=false&allowMultiQueries=true&useSSL=false
#druid.username=cbc
#druid.password=cbc
#设置数据库连接池的初始化连接数
#该值设置过大，超过tomcat的JVM虚拟机内存大小会报错内存溢出Java heap space
#解决方法:设置tomcat的JVM虚拟机内存大小
druid.initialSize=10
#最小连接池数量
druid.minIdle=5 
#设置数据库连接池的最大连接数
druid.maxActive=2000 
#获取连接时最大等待时间，单位毫秒。配置了maxWait之后， 缺省启用公平锁，并发效率会有所下降， 如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
#druid.maxWait=6000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒，60000=60秒
druid.timeBetweenEvictionRunsMillis=60000
#配置一个连接在池中最小生存的时间，单位是毫秒；300秒 -->
druid.minEvictableIdleTimeMillis=300000
#用来检测连接是否有效的sql，要求是一个查询语句。 如果validationQuery为null，testOnBorrow、testOnReturn、 testWhileIdle都不会有作用。
druid.validationQuery=SELECT 1
#建议配置为true，不影响性能，并且保证安全性。 申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis， 执行validationQuery检测连接是否有效。
druid.testWhileIdle=true
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
druid.testOnBorrow=false
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
druid.testOnReturn=false
#是否缓存preparedStatement，也就是PSCache。 PSCache对支持游标的数据库性能提升巨大，比如说oracle。
#在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。
druid.poolPreparedStatements=false
#要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true。
#在Druid中，不会存在Oracle下PSCache占用内存过多的问题， 可以把这个数值配置大一些，比如说100
druid.maxPoolPreparedStatementPerConnectionSize=-1
#属性类型是字符串，通过别名的方式配置扩展插件，
#常用的插件有：
#监控统计用的filter:stat
#日志用的filter:log4j
#防sql注入的filter:wall
druid.filters=stat,wall








